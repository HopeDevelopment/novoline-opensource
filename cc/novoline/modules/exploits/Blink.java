/*
 * Decompiled with CFR 0.152.
 * 
 * Could not load the following classes:
 *  com.mojang.authlib.GameProfile
 *  org.checkerframework.checker.nullness.qual.NonNull
 */
package cc.novoline.modules.exploits;

import cc.novoline.events.EventTarget;
import cc.novoline.events.State;
import cc.novoline.events.events.LoadWorldEvent;
import cc.novoline.events.events.PacketEvent;
import cc.novoline.events.events.SettingEvent;
import cc.novoline.gui.screen.setting.Setting;
import cc.novoline.invoke.BlockInvoker;
import cc.novoline.invoke.ManagerInvoker;
import cc.novoline.invoke.ModuleInvoker;
import cc.novoline.invoke.PacketEventInvoker;
import cc.novoline.invoke.PlayerInvoker;
import cc.novoline.invoke.StringPropertyInvoker;
import cc.novoline.modules.AbstractModule;
import cc.novoline.modules.player.Scaffold;
import com.mojang.authlib.GameProfile;
import cc.novoline.modules.EnumModuleType;
import deobf.IntProperty;
import deobf.ModuleRegistry;
import deobf.Packet;
import cc.novoline.modules.configurations.annotation.Property;
import deobf.SettingType;
import net.minecraft.network.packts.C02PacketUseEntity;
import net.minecraft.network.packts.C03PacketPlayer;
import net.minecraft.network.packts.C07PacketPlayerDigging;
import net.minecraft.network.packts.C08PacketPlayerBlockPlacement;
import net.minecraft.network.packts.C0BPacketEntityAction;
import net.minecraft.network.packts.S08PacketPlayerPosLook;
import java.lang.invoke.CallSite;
import java.lang.invoke.MethodHandle;
import java.lang.invoke.MethodHandles;
import java.lang.invoke.MethodType;
import java.lang.invoke.MutableCallSite;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import javax.crypto.Cipher;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.IvParameterSpec;
import net.Ba;
import net.BooleanProperty;
import net.Freecam;
import net.ModuleManager;
import net.NotificationType;
import net.P8;
import net.StringProperty;
import net.a1c;
import net.aAK;
import net.adt_2;
import net.afm_0;
import net.akr_1;
import net.anf_2;
import net.arb_0;
import net.asp_2;
import net.auk_2;
import net.awc_1;
import net.ax0_0;
import net.oj_2;
import org.checkerframework.checker.nullness.qual.NonNull;

public class Blink
extends AbstractModule {
    @Property(value="packet-limit")
    private IntProperty J;
    private static Map P;
    private static String[] N;
    private oj_2 K;
    @Property(value="mode")
    private StringProperty I;
    private static long M;
    @Property(value="lagback-check")
    private BooleanProperty L;
    private ArrayList<Packet> H;
    private static String[] O;

    private static CallSite b(MethodHandles.Lookup lookup, String string, MethodType methodType) {
        MutableCallSite mutableCallSite = new MutableCallSite(methodType);
        try {
            mutableCallSite.setTarget(MethodHandles.explicitCastArguments(MethodHandles.insertArguments(cfr_ldc_0().asCollector(Object[].class, methodType.parameterCount()), 0, lookup, mutableCallSite, string), methodType));
            return mutableCallSite;
        }
        catch (Exception exception) {
            throw new RuntimeException("net/a_6" + " : " + string + " : " + methodType.toString(), exception);
        }
    }

    private Boolean lambda$new$0() {
        return auk_2.b(StringPropertyInvoker.isMode(this.I, arb_0.g));
    }

    public StringProperty b() {
        return this.I;
    }

    public oj_2 a() {
        return this.K;
    }

    private static String b(int n, long l4) {
        int n2 = n ^ (int)(l4 & 0x7FFFL) ^ 0x6A6C;
        if (O[n2] == null) {
            try {
                Long l5 = Thread.currentThread().getId();
                Object[] objectArray = (Object[])P.get(l5);
                objectArray = new Object[]{Cipher.getInstance("DES/CBC/PKCS5Padding"), SecretKeyFactory.getInstance("DES"), new IvParameterSpec(new byte[8])};
                P.put(l5, objectArray);
            }
            catch (Exception exception) {
                throw new RuntimeException("net/a_6", exception);
            }
            byte[] byArray = new byte[8];
            byArray[0] = (byte)(l4 >>> 56);
            int n3 = 1;
            while (true) {
                byArray[n3] = (byte)(l4 << n3 * 8 >>> 56);
                ++n3;
            }
        }
        return O[n2];
    }

    @Override
    public void o() {
        Disabler.d();
        this.checkModule(Freecam.class, Scaffold.class);
        if (StringPropertyInvoker.isMode(this.I, arb_0.j)) {
            this.K = new oj_2(this.mc.world, new GameProfile(awc_1.a(arb_0.c), arb_0.e));
            ax0_0.a(this.K, this.mc.player);
            ax0_0.b(this.K, this.mc.player.aP);
            ax0_0.a(this.K, PlayerInvoker.aa(this.mc.player));
            BlockInvoker.a(this.mc.world, anf_2.c(anf_2.c()), this.K);
        }
    }

    static {
        M = a1c.a(-6280379397004294463L, -7430356718019739747L, MethodHandles.lookup().lookupClass()).a(98289023791670L);
        P = new HashMap(13);
        long l4 = M ^ 0x21AC7D05C109L;
        Cipher cipher = Cipher.getInstance("DES/CBC/PKCS5Padding");
        int n = 2;
        SecretKeyFactory secretKeyFactory = SecretKeyFactory.getInstance("DES");
        byte[] byArray = new byte[8];
        byte[] byArray2 = byArray;
        byArray[0] = (byte)(l4 >>> 56);
        int n2 = 1;
        while (true) {
            byArray2 = byArray2;
            byArray2[n2] = (byte)(l4 << n2 * 8 >>> 56);
            ++n2;
        }
    }

    private static String b(byte[] byArray) {
        int n = 0;
        int n2 = byArray.length;
        char[] cArray = new char[n2];
        for (int i = 0; i < n2; ++i) {
            char c;
            int n3 = 0xFF & byArray[i];
            if (n3 < 192) {
                cArray[n++] = (char)n3;
                continue;
            }
            if (n3 < 224) {
                c = (char)((char)(n3 & 0x1F) << 6);
                n3 = byArray[++i];
                c = (char)(c | (char)(n3 & 0x3F));
                cArray[n++] = c;
                continue;
            }
            if (i >= n2 - 2) continue;
            c = (char)((char)(n3 & 0xF) << 12);
            n3 = byArray[++i];
            c = (char)(c | (char)(n3 & 0x3F) << 6);
            n3 = byArray[++i];
            c = (char)(c | (char)(n3 & 0x3F));
            cArray[n++] = c;
        }
        return new String(cArray, 0, n);
    }

    private static Object b(MethodHandles.Lookup lookup, MutableCallSite mutableCallSite, String string, Object[] objectArray) {
        int n = (Integer)objectArray[0];
        long l4 = (Long)objectArray[1];
        String string2 = Blink.b(n, l4);
        MethodHandle methodHandle = MethodHandles.constant(String.class, string2);
        mutableCallSite.setTarget(MethodHandles.dropArguments(methodHandle, 0, Integer.TYPE, Long.TYPE));
        return string2;
    }

    @EventTarget
    public void a(LoadWorldEvent loadWorldEvent) {
        akr_1.c(this.H);
        this.a(this.getClass());
    }

    @Override
    public void w() {
        Disabler.d();
        if (this.mc.world != null && this.K != null) {
            BlockInvoker.b(this.mc.world, this.K);
        }
        if (!akr_1.b(this.H)) {
            akr_1.a(this.H, this::b);
            akr_1.c(this.H);
        }
    }

    public void a(SettingEvent settingEvent) {
        Disabler.d();
        if (settingEvent == null || afm_0.b(settingEvent).equals(arb_0.b) || afm_0.b(settingEvent).equals(arb_0.h)) {
            boolean bl;
            Disabler disabler = (Disabler)ModuleInvoker.isEnable(ModuleRegistry.DISABLER);
            boolean bl2 = bl = disabler.x() && aAK.a(disabler);
            if (StringPropertyInvoker.isMode(this.I, arb_0.i)) {
                this.a(this.r(), arb_0.a, 4500, NotificationType.WARNING);
                StringPropertyInvoker.b(this.I, arb_0.f);
            }
        }
    }

    @EventTarget
    private void a(PacketEvent packetEvent) {
        block6: {
            block4: {
                block5: {
                    Disabler.d();
                    if (!PacketEventInvoker.getState(packetEvent).equals((Object)State.OUTGOING)) break block4;
                    if (!(PacketEventInvoker.c(packetEvent) instanceof C03PacketPlayer)) break block5;
                    akr_1.a(this.H, PacketEventInvoker.c(packetEvent));
                    PacketEventInvoker.setCancelled(packetEvent, true);
                    if (!StringPropertyInvoker.isMode(this.I, arb_0.d) || akr_1.d(this.H) <= P8.b((Integer)adt_2.a(this.J))) break block6;
                    akr_1.a(this.H, this::b);
                    akr_1.c(this.H);
                }
                if (!(PacketEventInvoker.c(packetEvent) instanceof C02PacketUseEntity) && !(PacketEventInvoker.c(packetEvent) instanceof C0BPacketEntityAction) && !(PacketEventInvoker.c(packetEvent) instanceof C07PacketPlayerDigging) && !(PacketEventInvoker.c(packetEvent) instanceof C08PacketPlayerBlockPlacement)) break block6;
                PacketEventInvoker.setCancelled(packetEvent, true);
            }
            if (PacketEventInvoker.c(packetEvent) instanceof S08PacketPlayerPosLook && auk_2.a((Boolean)Ba.b(this.L))) {
                this.a(this.getClass());
            }
        }
    }

    public Blink(@NonNull ModuleManager moduleManager, EnumModuleType enumModuleType, String string, char c, long l4) {
        long l5 = ((long)c << 48 | l4 << 16 >>> 16) ^ M;
        long l6 = l5 ^ 0xC771F329972L;
        int n = (int)(l6 >>> 56);
        long l7 = l6 << 8 >>> 8;
        super((byte)n, moduleManager, l7, enumModuleType, string);
        this.H = new ArrayList();
        this.I = StringPropertyInvoker.b(asp_2.a((String)((Object)Blink.b("z", (int)14660, (long)(0x22E902D6E49AED6EL ^ l5)))), new String[]{Blink.b("z", (int)2754, (long)(0x3954C9931AE4DEEEL ^ l5)), Blink.b("z", (int)15546, (long)(0x1F730FD64AD0E897L ^ l5))});
        this.L = asp_2.c();
        this.J = (IntProperty)adt_2.a((IntProperty)adt_2.c(asp_2.a(P8.d(4)), P8.d(2)), P8.d(15));
        ManagerInvoker.put(new Setting((String)((Object)Blink.b("z", (int)13206, (long)(0x10D8CF16F5D7E7BDL ^ l5))), (String)((Object)Blink.b("z", (int)13143, (long)(0x76DC1D8F68A1E774L ^ l5))), SettingType.COMBOBOX, (AbstractModule)this, this.I));
        ManagerInvoker.put(new Setting((String)((Object)Blink.b("z", (int)28612, (long)(0x31424113EC073BEDL ^ l5))), (String)((Object)Blink.b("z", (int)1976, (long)(0x65A69F1832DB5397L ^ l5))), SettingType.SLIDER, (AbstractModule)this, this.J, 1.0, this::lambda$new$0));
        ManagerInvoker.put(new Setting((String)((Object)Blink.b("z", (int)6482, (long)(0x56E46FC52FAECD7CL ^ l5))), (String)((Object)Blink.b("z", (int)12981, (long)(0x77B5CBE75EE6669DL ^ l5))), SettingType.CHECKBOX, (AbstractModule)this, this.L));
    }

    /*
     * Works around MethodHandle LDC.
     */
    static MethodHandle cfr_ldc_0() {
        try {
            return MethodHandles.lookup().findStatic(Blink.class, "b", MethodType.fromMethodDescriptorString("(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/invoke/MutableCallSite;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/Object;", null));
        }
        catch (NoSuchMethodException | IllegalAccessException except) {
            throw new IllegalArgumentException(except);
        }
    }
}

